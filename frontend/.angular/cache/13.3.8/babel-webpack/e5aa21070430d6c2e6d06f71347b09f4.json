{"ast":null,"code":"import { EMPTY } from 'rxjs';\nimport * as auth from 'firebase/auth';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/compat/firestore\";\nimport * as i2 from \"@angular/fire/compat/auth\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/material/snack-bar\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(afs, // Inject Firestore service\n    afAuth, // Inject Firebase auth service\n    router, ngZone, // NgZone service to remove outside scope warning\n    snackBar) {\n      this.afs = afs;\n      this.afAuth = afAuth;\n      this.router = router;\n      this.ngZone = ngZone;\n      this.snackBar = snackBar;\n      /* Saving user data in localstorage when\n      logged in and setting up null when logged out */\n\n      this.afAuth.authState.subscribe(user => {\n        if (user) {\n          this.userData = user;\n          localStorage.setItem('user', JSON.stringify(this.userData));\n          JSON.parse(localStorage.getItem('user'));\n        } else {\n          localStorage.setItem('user', 'null');\n          JSON.parse(localStorage.getItem('user'));\n        }\n      });\n    }\n\n    showMessage(msg, isError = false) {\n      this.snackBar.open(msg, \"X\", {\n        duration: 3000,\n        horizontalPosition: \"right\",\n        verticalPosition: \"top\",\n        panelClass: isError ? [\"msg-error\"] : [\"msg-success\"]\n      });\n    } // Sign in with email/password\n\n\n    SignIn(email, password) {\n      return this.afAuth.signInWithEmailAndPassword(email, password).then(result => {\n        this.router.navigate([\"/home\"]);\n        this.ngZone.run(() => {\n          const isLoading = false;\n          this.load();\n          location.reload();\n        });\n        this.SetUserData(result.user);\n      }).catch(e => {\n        this.errorHandler(e);\n      });\n    } // Sign up with email/password\n\n\n    SignUp(email, password) {\n      return this.afAuth.createUserWithEmailAndPassword(email, password).then(result => {\n        /* Call the SendVerificaitonMail() function when new user sign\n        up and returns promise */\n        this.SendVerificationMail();\n        this.SetUserData(result.user);\n      }).catch(error => {\n        window.alert(error.message);\n      });\n    } // Send email verfificaiton when new user sign up\n\n\n    SendVerificationMail() {\n      return this.afAuth.currentUser.then(u => u.sendEmailVerification()).then(() => {\n        this.router.navigate(['verify-email-address']);\n      });\n    } // Reset Forggot password\n\n\n    ForgotPassword(passwordResetEmail) {\n      return this.afAuth.sendPasswordResetEmail(passwordResetEmail).then(() => {\n        window.alert('Password reset email sent, check your inbox.');\n      }).catch(error => {\n        window.alert(error);\n      });\n    } // Returns true when user is looged in and email is verified\n\n\n    get isLoggedIn() {\n      const user = JSON.parse(localStorage.getItem('user'));\n      return user !== null !== false ? true : false;\n    } // Sign in with Google\n\n\n    GoogleAuth() {\n      return this.AuthLogin(new auth.GoogleAuthProvider()).then(res => {\n        if (res) {\n          this.router.navigate([\"/home\"]);\n        }\n      });\n    } // Auth logic to run auth providers\n\n\n    AuthLogin(provider) {\n      return this.afAuth.signInWithPopup(provider).then(result => {\n        this.ngZone.run(() => {\n          this.router.navigate([\"/\"]);\n        });\n        this.SetUserData(result.user);\n        this.router.navigate([\"/\"]);\n      }).catch(error => {\n        window.alert(error);\n      });\n    }\n    /* Setting up user data when sign in with username/password,\n    sign up with username/password and sign in with social auth\n    provider in Firestore database using AngularFirestore + AngularFirestoreDocument service */\n\n\n    SetUserData(user) {\n      const userRef = this.afs.doc(`users/${user.uid}`);\n      const userData = {\n        uid: user.uid,\n        email: user.email,\n        displayName: user.displayName,\n        photoURL: user.photoURL,\n        emailVerified: user.emailVerified\n      };\n      return userRef.set(userData, {\n        merge: true\n      });\n    } // Sign out\n\n\n    SignOut() {\n      return this.afAuth.signOut().then(() => {\n        localStorage.removeItem('user');\n        this.router.navigate(['/sign-in']);\n        this.load();\n        location.reload();\n      });\n    }\n\n    load() {\n      //Session storage salva os dados como string\n      (sessionStorage.refresh == 'true' || !sessionStorage.refresh) && location.reload();\n      sessionStorage.refresh = false;\n    }\n\n    errorHandler(e) {\n      this.showMessage(\"Login ou Senha Incorretos\", true);\n      return EMPTY;\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.AngularFirestore), i0.ɵɵinject(i2.AngularFireAuth), i0.ɵɵinject(i3.Router), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i4.MatSnackBar));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}