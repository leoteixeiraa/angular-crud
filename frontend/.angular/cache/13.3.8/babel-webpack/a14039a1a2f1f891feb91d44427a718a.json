{"ast":null,"code":"import firebase from '@firebase/app-compat';\nimport { FirestoreError, Bytes, _isBase64Available, enableIndexedDbPersistence, enableMultiTabIndexedDbPersistence, clearIndexedDbPersistence, _DatabaseId, _logWarn, connectFirestoreEmulator, enableNetwork, disableNetwork, _validateIsNotUsedTogether, waitForPendingWrites, onSnapshotsInSync, collection, doc, collectionGroup, runTransaction, ensureFirestoreConfigured, WriteBatch as WriteBatch$1, executeWrite, loadBundle, namedQuery, _cast, DocumentReference as DocumentReference$1, DocumentSnapshot as DocumentSnapshot$1, _DocumentKey, refEqual, setDoc, updateDoc, deleteDoc, onSnapshot, getDocFromCache, getDocFromServer, getDoc, snapshotEqual, query, where, orderBy, limit, limitToLast, startAt, startAfter, endBefore, endAt, queryEqual, getDocsFromCache, getDocsFromServer, getDocs, QuerySnapshot as QuerySnapshot$1, addDoc, AbstractUserDataWriter, setLogLevel as setLogLevel$1, QueryDocumentSnapshot as QueryDocumentSnapshot$1, _debugAssert, FieldPath as FieldPath$1, _FieldPath, serverTimestamp, deleteField, arrayUnion, arrayRemove, increment, GeoPoint, Timestamp, CACHE_SIZE_UNLIMITED } from '@firebase/firestore';\nimport { getModularInstance } from '@firebase/util';\nimport { Component } from '@firebase/component';\nconst name = \"@firebase/firestore-compat\";\nconst version = \"0.1.20\";\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nfunction validateSetOptions(methodName, options) {\n  if (options === undefined) {\n    return {\n      merge: false\n    };\n  }\n\n  if (options.mergeFields !== undefined && options.merge !== undefined) {\n    throw new FirestoreError('invalid-argument', `Invalid options passed to function ${methodName}(): You cannot ` + 'specify both \"merge\" and \"mergeFields\".');\n  }\n\n  return options;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/** Helper function to assert Uint8Array is available at runtime. */\n\n\nfunction assertUint8ArrayAvailable() {\n  if (typeof Uint8Array === 'undefined') {\n    throw new FirestoreError('unimplemented', 'Uint8Arrays are not available in this environment.');\n  }\n}\n/** Helper function to assert Base64 functions are available at runtime. */\n\n\nfunction assertBase64Available() {\n  if (!_isBase64Available()) {\n    throw new FirestoreError('unimplemented', 'Blobs are unavailable in Firestore in this environment.');\n  }\n}\n/** Immutable class holding a blob (binary data) */\n\n\nclass Blob {\n  constructor(_delegate) {\n    this._delegate = _delegate;\n  }\n\n  static fromBase64String(base64) {\n    assertBase64Available();\n    return new Blob(Bytes.fromBase64String(base64));\n  }\n\n  static fromUint8Array(array) {\n    assertUint8ArrayAvailable();\n    return new Blob(Bytes.fromUint8Array(array));\n  }\n\n  toBase64() {\n    assertBase64Available();\n    return this._delegate.toBase64();\n  }\n\n  toUint8Array() {\n    assertUint8ArrayAvailable();\n    return this._delegate.toUint8Array();\n  }\n\n  isEqual(other) {\n    return this._delegate.isEqual(other._delegate);\n  }\n\n  toString() {\n    return 'Blob(base64: ' + this.toBase64() + ')';\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction isPartialObserver(obj) {\n  return implementsAnyMethods(obj, ['next', 'error', 'complete']);\n}\n/**\r\n * Returns true if obj is an object and contains at least one of the specified\r\n * methods.\r\n */\n\n\nfunction implementsAnyMethods(obj, methods) {\n  if (typeof obj !== 'object' || obj === null) {\n    return false;\n  }\n\n  const object = obj;\n\n  for (const method of methods) {\n    if (method in object && typeof object[method] === 'function') {\n      return true;\n    }\n  }\n\n  return false;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * The persistence provider included with the full Firestore SDK.\r\n */\n\n\nclass IndexedDbPersistenceProvider {\n  enableIndexedDbPersistence(firestore, forceOwnership) {\n    return enableIndexedDbPersistence(firestore._delegate, {\n      forceOwnership\n    });\n  }\n\n  enableMultiTabIndexedDbPersistence(firestore) {\n    return enableMultiTabIndexedDbPersistence(firestore._delegate);\n  }\n\n  clearIndexedDbPersistence(firestore) {\n    return clearIndexedDbPersistence(firestore._delegate);\n  }\n\n}\n/**\r\n * Compat class for Firestore. Exposes Firestore Legacy API, but delegates\r\n * to the functional API of firestore-exp.\r\n */\n\n\nclass Firestore {\n  constructor(databaseIdOrApp, _delegate, _persistenceProvider) {\n    this._delegate = _delegate;\n    this._persistenceProvider = _persistenceProvider;\n    this.INTERNAL = {\n      delete: () => this.terminate()\n    };\n\n    if (!(databaseIdOrApp instanceof _DatabaseId)) {\n      this._appCompat = databaseIdOrApp;\n    }\n  }\n\n  get _databaseId() {\n    return this._delegate._databaseId;\n  }\n\n  settings(settingsLiteral) {\n    const currentSettings = this._delegate._getSettings();\n\n    if (!settingsLiteral.merge && currentSettings.host !== settingsLiteral.host) {\n      _logWarn('You are overriding the original host. If you did not intend ' + 'to override your settings, use {merge: true}.');\n    }\n\n    if (settingsLiteral.merge) {\n      settingsLiteral = Object.assign(Object.assign({}, currentSettings), settingsLiteral); // Remove the property from the settings once the merge is completed\n\n      delete settingsLiteral.merge;\n    }\n\n    this._delegate._setSettings(settingsLiteral);\n  }\n\n  useEmulator(host, port, options = {}) {\n    connectFirestoreEmulator(this._delegate, host, port, options);\n  }\n\n  enableNetwork() {\n    return enableNetwork(this._delegate);\n  }\n\n  disableNetwork() {\n    return disableNetwork(this._delegate);\n  }\n\n  enablePersistence(settings) {\n    let synchronizeTabs = false;\n    let experimentalForceOwningTab = false;\n\n    if (settings) {\n      synchronizeTabs = !!settings.synchronizeTabs;\n      experimentalForceOwningTab = !!settings.experimentalForceOwningTab;\n\n      _validateIsNotUsedTogether('synchronizeTabs', synchronizeTabs, 'experimentalForceOwningTab', experimentalForceOwningTab);\n    }\n\n    return synchronizeTabs ? this._persistenceProvider.enableMultiTabIndexedDbPersistence(this) : this._persistenceProvider.enableIndexedDbPersistence(this, experimentalForceOwningTab);\n  }\n\n  clearPersistence() {\n    return this._persistenceProvider.clearIndexedDbPersistence(this);\n  }\n\n  terminate() {\n    if (this._appCompat) {\n      this._appCompat._removeServiceInstance('firestore-compat');\n\n      this._appCompat._removeServiceInstance('firestore');\n    }\n\n    return this._delegate._delete();\n  }\n\n  waitForPendingWrites() {\n    return waitForPendingWrites(this._delegate);\n  }\n\n  onSnapshotsInSync(arg) {\n    return onSnapshotsInSync(this._delegate, arg);\n  }\n\n  get app() {\n    if (!this._appCompat) {\n      throw new FirestoreError('failed-precondition', \"Firestore was not initialized using the Firebase SDK. 'app' is \" + 'not available');\n    }\n\n    return this._appCompat;\n  }\n\n  collection(pathString) {\n    try {\n      return new CollectionReference(this, collection(this._delegate, pathString));\n    } catch (e) {\n      throw replaceFunctionName(e, 'collection()', 'Firestore.collection()');\n    }\n  }\n\n  doc(pathString) {\n    try {\n      return new DocumentReference(this, doc(this._delegate, pathString));\n    } catch (e) {\n      throw replaceFunctionName(e, 'doc()', 'Firestore.doc()');\n    }\n  }\n\n  collectionGroup(collectionId) {\n    try {\n      return new Query(this, collectionGroup(this._delegate, collectionId));\n    } catch (e) {\n      throw replaceFunctionName(e, 'collectionGroup()', 'Firestore.collectionGroup()');\n    }\n  }\n\n  runTransaction(updateFunction) {\n    return runTransaction(this._delegate, transaction => updateFunction(new Transaction(this, transaction)));\n  }\n\n  batch() {\n    ensureFirestoreConfigured(this._delegate);\n    return new WriteBatch(new WriteBatch$1(this._delegate, mutations => executeWrite(this._delegate, mutations)));\n  }\n\n  loadBundle(bundleData) {\n    return loadBundle(this._delegate, bundleData);\n  }\n\n  namedQuery(name) {\n    return namedQuery(this._delegate, name).then(expQuery => {\n      if (!expQuery) {\n        return null;\n      }\n\n      return new Query(this, // We can pass `expQuery` here directly since named queries don't have a UserDataConverter.\n      // Otherwise, we would have to create a new ExpQuery and pass the old UserDataConverter.\n      expQuery);\n    });\n  }\n\n}\n\nclass UserDataWriter extends AbstractUserDataWriter {\n  constructor(firestore) {\n    super();\n    this.firestore = firestore;\n  }\n\n  convertBytes(bytes) {\n    return new Blob(new Bytes(bytes));\n  }\n\n  convertReference(name) {\n    const key = this.convertDocumentKey(name, this.firestore._databaseId);\n    return DocumentReference.forKey(key, this.firestore,\n    /* converter= */\n    null);\n  }\n\n}\n\nfunction setLogLevel(level) {\n  setLogLevel$1(level);\n}\n/**\r\n * A reference to a transaction.\r\n */\n\n\nclass Transaction {\n  constructor(_firestore, _delegate) {\n    this._firestore = _firestore;\n    this._delegate = _delegate;\n    this._userDataWriter = new UserDataWriter(_firestore);\n  }\n\n  get(documentRef) {\n    const ref = castReference(documentRef);\n    return this._delegate.get(ref).then(result => new DocumentSnapshot(this._firestore, new DocumentSnapshot$1(this._firestore._delegate, this._userDataWriter, result._key, result._document, result.metadata, ref.converter)));\n  }\n\n  set(documentRef, data, options) {\n    const ref = castReference(documentRef);\n\n    if (options) {\n      validateSetOptions('Transaction.set', options);\n\n      this._delegate.set(ref, data, options);\n    } else {\n      this._delegate.set(ref, data);\n    }\n\n    return this;\n  }\n\n  update(documentRef, dataOrField, value, ...moreFieldsAndValues) {\n    const ref = castReference(documentRef);\n\n    if (arguments.length === 2) {\n      this._delegate.update(ref, dataOrField);\n    } else {\n      this._delegate.update(ref, dataOrField, value, ...moreFieldsAndValues);\n    }\n\n    return this;\n  }\n\n  delete(documentRef) {\n    const ref = castReference(documentRef);\n\n    this._delegate.delete(ref);\n\n    return this;\n  }\n\n}\n\nclass WriteBatch {\n  constructor(_delegate) {\n    this._delegate = _delegate;\n  }\n\n  set(documentRef, data, options) {\n    const ref = castReference(documentRef);\n\n    if (options) {\n      validateSetOptions('WriteBatch.set', options);\n\n      this._delegate.set(ref, data, options);\n    } else {\n      this._delegate.set(ref, data);\n    }\n\n    return this;\n  }\n\n  update(documentRef, dataOrField, value, ...moreFieldsAndValues) {\n    const ref = castReference(documentRef);\n\n    if (arguments.length === 2) {\n      this._delegate.update(ref, dataOrField);\n    } else {\n      this._delegate.update(ref, dataOrField, value, ...moreFieldsAndValues);\n    }\n\n    return this;\n  }\n\n  delete(documentRef) {\n    const ref = castReference(documentRef);\n\n    this._delegate.delete(ref);\n\n    return this;\n  }\n\n  commit() {\n    return this._delegate.commit();\n  }\n\n}\n/**\r\n * Wraps a `PublicFirestoreDataConverter` translating the types from the\r\n * experimental SDK into corresponding types from the Classic SDK before passing\r\n * them to the wrapped converter.\r\n */\n\n\nclass FirestoreDataConverter {\n  constructor(_firestore, _userDataWriter, _delegate) {\n    this._firestore = _firestore;\n    this._userDataWriter = _userDataWriter;\n    this._delegate = _delegate;\n  }\n\n  fromFirestore(snapshot, options) {\n    const expSnapshot = new QueryDocumentSnapshot$1(this._firestore._delegate, this._userDataWriter, snapshot._key, snapshot._document, snapshot.metadata,\n    /* converter= */\n    null);\n    return this._delegate.fromFirestore(new QueryDocumentSnapshot(this._firestore, expSnapshot), options !== null && options !== void 0 ? options : {});\n  }\n\n  toFirestore(modelObject, options) {\n    if (!options) {\n      return this._delegate.toFirestore(modelObject);\n    } else {\n      return this._delegate.toFirestore(modelObject, options);\n    }\n  } // Use the same instance of `FirestoreDataConverter` for the given instances\n  // of `Firestore` and `PublicFirestoreDataConverter` so that isEqual() will\n  // compare equal for two objects created with the same converter instance.\n\n\n  static getInstance(firestore, converter) {\n    const converterMapByFirestore = FirestoreDataConverter.INSTANCES;\n    let untypedConverterByConverter = converterMapByFirestore.get(firestore);\n\n    if (!untypedConverterByConverter) {\n      untypedConverterByConverter = new WeakMap();\n      converterMapByFirestore.set(firestore, untypedConverterByConverter);\n    }\n\n    let instance = untypedConverterByConverter.get(converter);\n\n    if (!instance) {\n      instance = new FirestoreDataConverter(firestore, new UserDataWriter(firestore), converter);\n      untypedConverterByConverter.set(converter, instance);\n    }\n\n    return instance;\n  }\n\n}\n\nFirestoreDataConverter.INSTANCES = new WeakMap();\n/**\r\n * A reference to a particular document in a collection in the database.\r\n */\n\nclass DocumentReference {\n  constructor(firestore, _delegate) {\n    this.firestore = firestore;\n    this._delegate = _delegate;\n    this._userDataWriter = new UserDataWriter(firestore);\n  }\n\n  static forPath(path, firestore, converter) {\n    if (path.length % 2 !== 0) {\n      throw new FirestoreError('invalid-argument', 'Invalid document reference. Document ' + 'references must have an even number of segments, but ' + `${path.canonicalString()} has ${path.length}`);\n    }\n\n    return new DocumentReference(firestore, new DocumentReference$1(firestore._delegate, converter, new _DocumentKey(path)));\n  }\n\n  static forKey(key, firestore, converter) {\n    return new DocumentReference(firestore, new DocumentReference$1(firestore._delegate, converter, key));\n  }\n\n  get id() {\n    return this._delegate.id;\n  }\n\n  get parent() {\n    return new CollectionReference(this.firestore, this._delegate.parent);\n  }\n\n  get path() {\n    return this._delegate.path;\n  }\n\n  collection(pathString) {\n    try {\n      return new CollectionReference(this.firestore, collection(this._delegate, pathString));\n    } catch (e) {\n      throw replaceFunctionName(e, 'collection()', 'DocumentReference.collection()');\n    }\n  }\n\n  isEqual(other) {\n    other = getModularInstance(other);\n\n    if (!(other instanceof DocumentReference$1)) {\n      return false;\n    }\n\n    return refEqual(this._delegate, other);\n  }\n\n  set(value, options) {\n    options = validateSetOptions('DocumentReference.set', options);\n\n    try {\n      if (options) {\n        return setDoc(this._delegate, value, options);\n      } else {\n        return setDoc(this._delegate, value);\n      }\n    } catch (e) {\n      throw replaceFunctionName(e, 'setDoc()', 'DocumentReference.set()');\n    }\n  }\n\n  update(fieldOrUpdateData, value, ...moreFieldsAndValues) {\n    try {\n      if (arguments.length === 1) {\n        return updateDoc(this._delegate, fieldOrUpdateData);\n      } else {\n        return updateDoc(this._delegate, fieldOrUpdateData, value, ...moreFieldsAndValues);\n      }\n    } catch (e) {\n      throw replaceFunctionName(e, 'updateDoc()', 'DocumentReference.update()');\n    }\n  }\n\n  delete() {\n    return deleteDoc(this._delegate);\n  }\n\n  onSnapshot(...args) {\n    const options = extractSnapshotOptions(args);\n    const observer = wrapObserver(args, result => new DocumentSnapshot(this.firestore, new DocumentSnapshot$1(this.firestore._delegate, this._userDataWriter, result._key, result._document, result.metadata, this._delegate.converter)));\n    return onSnapshot(this._delegate, options, observer);\n  }\n\n  get(options) {\n    let snap;\n\n    if ((options === null || options === void 0 ? void 0 : options.source) === 'cache') {\n      snap = getDocFromCache(this._delegate);\n    } else if ((options === null || options === void 0 ? void 0 : options.source) === 'server') {\n      snap = getDocFromServer(this._delegate);\n    } else {\n      snap = getDoc(this._delegate);\n    }\n\n    return snap.then(result => new DocumentSnapshot(this.firestore, new DocumentSnapshot$1(this.firestore._delegate, this._userDataWriter, result._key, result._document, result.metadata, this._delegate.converter)));\n  }\n\n  withConverter(converter) {\n    return new DocumentReference(this.firestore, converter ? this._delegate.withConverter(FirestoreDataConverter.getInstance(this.firestore, converter)) : this._delegate.withConverter(null));\n  }\n\n}\n/**\r\n * Replaces the function name in an error thrown by the firestore-exp API\r\n * with the function names used in the classic API.\r\n */\n\n\nfunction replaceFunctionName(e, original, updated) {\n  e.message = e.message.replace(original, updated);\n  return e;\n}\n/**\r\n * Iterates the list of arguments from an `onSnapshot` call and returns the\r\n * first argument that may be an `SnapshotListenOptions` object. Returns an\r\n * empty object if none is found.\r\n */\n\n\nfunction extractSnapshotOptions(args) {\n  for (const arg of args) {\n    if (typeof arg === 'object' && !isPartialObserver(arg)) {\n      return arg;\n    }\n  }\n\n  return {};\n}\n/**\r\n * Creates an observer that can be passed to the firestore-exp SDK. The\r\n * observer converts all observed values into the format expected by the classic\r\n * SDK.\r\n *\r\n * @param args - The list of arguments from an `onSnapshot` call.\r\n * @param wrapper - The function that converts the firestore-exp type into the\r\n * type used by this shim.\r\n */\n\n\nfunction wrapObserver(args, wrapper) {\n  var _a, _b;\n\n  let userObserver;\n\n  if (isPartialObserver(args[0])) {\n    userObserver = args[0];\n  } else if (isPartialObserver(args[1])) {\n    userObserver = args[1];\n  } else if (typeof args[0] === 'function') {\n    userObserver = {\n      next: args[0],\n      error: args[1],\n      complete: args[2]\n    };\n  } else {\n    userObserver = {\n      next: args[1],\n      error: args[2],\n      complete: args[3]\n    };\n  }\n\n  return {\n    next: val => {\n      if (userObserver.next) {\n        userObserver.next(wrapper(val));\n      }\n    },\n    error: (_a = userObserver.error) === null || _a === void 0 ? void 0 : _a.bind(userObserver),\n    complete: (_b = userObserver.complete) === null || _b === void 0 ? void 0 : _b.bind(userObserver)\n  };\n}\n\nclass DocumentSnapshot {\n  constructor(_firestore, _delegate) {\n    this._firestore = _firestore;\n    this._delegate = _delegate;\n  }\n\n  get ref() {\n    return new DocumentReference(this._firestore, this._delegate.ref);\n  }\n\n  get id() {\n    return this._delegate.id;\n  }\n\n  get metadata() {\n    return this._delegate.metadata;\n  }\n\n  get exists() {\n    return this._delegate.exists();\n  }\n\n  data(options) {\n    return this._delegate.data(options);\n  }\n\n  get(fieldPath, options // We are using `any` here to avoid an explicit cast by our users.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ) {\n    return this._delegate.get(fieldPath, options);\n  }\n\n  isEqual(other) {\n    return snapshotEqual(this._delegate, other._delegate);\n  }\n\n}\n\nclass QueryDocumentSnapshot extends DocumentSnapshot {\n  data(options) {\n    const data = this._delegate.data(options);\n\n    _debugAssert(data !== undefined, 'Document in a QueryDocumentSnapshot should exist');\n\n    return data;\n  }\n\n}\n\nclass Query {\n  constructor(firestore, _delegate) {\n    this.firestore = firestore;\n    this._delegate = _delegate;\n    this._userDataWriter = new UserDataWriter(firestore);\n  }\n\n  where(fieldPath, opStr, value) {\n    try {\n      // The \"as string\" cast is a little bit of a hack. `where` accepts the\n      // FieldPath Compat type as input, but is not typed as such in order to\n      // not expose this via our public typings file.\n      return new Query(this.firestore, query(this._delegate, where(fieldPath, opStr, value)));\n    } catch (e) {\n      throw replaceFunctionName(e, /(orderBy|where)\\(\\)/, 'Query.$1()');\n    }\n  }\n\n  orderBy(fieldPath, directionStr) {\n    try {\n      // The \"as string\" cast is a little bit of a hack. `orderBy` accepts the\n      // FieldPath Compat type as input, but is not typed as such in order to\n      // not expose this via our public typings file.\n      return new Query(this.firestore, query(this._delegate, orderBy(fieldPath, directionStr)));\n    } catch (e) {\n      throw replaceFunctionName(e, /(orderBy|where)\\(\\)/, 'Query.$1()');\n    }\n  }\n\n  limit(n) {\n    try {\n      return new Query(this.firestore, query(this._delegate, limit(n)));\n    } catch (e) {\n      throw replaceFunctionName(e, 'limit()', 'Query.limit()');\n    }\n  }\n\n  limitToLast(n) {\n    try {\n      return new Query(this.firestore, query(this._delegate, limitToLast(n)));\n    } catch (e) {\n      throw replaceFunctionName(e, 'limitToLast()', 'Query.limitToLast()');\n    }\n  }\n\n  startAt(...args) {\n    try {\n      return new Query(this.firestore, query(this._delegate, startAt(...args)));\n    } catch (e) {\n      throw replaceFunctionName(e, 'startAt()', 'Query.startAt()');\n    }\n  }\n\n  startAfter(...args) {\n    try {\n      return new Query(this.firestore, query(this._delegate, startAfter(...args)));\n    } catch (e) {\n      throw replaceFunctionName(e, 'startAfter()', 'Query.startAfter()');\n    }\n  }\n\n  endBefore(...args) {\n    try {\n      return new Query(this.firestore, query(this._delegate, endBefore(...args)));\n    } catch (e) {\n      throw replaceFunctionName(e, 'endBefore()', 'Query.endBefore()');\n    }\n  }\n\n  endAt(...args) {\n    try {\n      return new Query(this.firestore, query(this._delegate, endAt(...args)));\n    } catch (e) {\n      throw replaceFunctionName(e, 'endAt()', 'Query.endAt()');\n    }\n  }\n\n  isEqual(other) {\n    return queryEqual(this._delegate, other._delegate);\n  }\n\n  get(options) {\n    let query;\n\n    if ((options === null || options === void 0 ? void 0 : options.source) === 'cache') {\n      query = getDocsFromCache(this._delegate);\n    } else if ((options === null || options === void 0 ? void 0 : options.source) === 'server') {\n      query = getDocsFromServer(this._delegate);\n    } else {\n      query = getDocs(this._delegate);\n    }\n\n    return query.then(result => new QuerySnapshot(this.firestore, new QuerySnapshot$1(this.firestore._delegate, this._userDataWriter, this._delegate, result._snapshot)));\n  }\n\n  onSnapshot(...args) {\n    const options = extractSnapshotOptions(args);\n    const observer = wrapObserver(args, snap => new QuerySnapshot(this.firestore, new QuerySnapshot$1(this.firestore._delegate, this._userDataWriter, this._delegate, snap._snapshot)));\n    return onSnapshot(this._delegate, options, observer);\n  }\n\n  withConverter(converter) {\n    return new Query(this.firestore, converter ? this._delegate.withConverter(FirestoreDataConverter.getInstance(this.firestore, converter)) : this._delegate.withConverter(null));\n  }\n\n}\n\nclass DocumentChange {\n  constructor(_firestore, _delegate) {\n    this._firestore = _firestore;\n    this._delegate = _delegate;\n  }\n\n  get type() {\n    return this._delegate.type;\n  }\n\n  get doc() {\n    return new QueryDocumentSnapshot(this._firestore, this._delegate.doc);\n  }\n\n  get oldIndex() {\n    return this._delegate.oldIndex;\n  }\n\n  get newIndex() {\n    return this._delegate.newIndex;\n  }\n\n}\n\nclass QuerySnapshot {\n  constructor(_firestore, _delegate) {\n    this._firestore = _firestore;\n    this._delegate = _delegate;\n  }\n\n  get query() {\n    return new Query(this._firestore, this._delegate.query);\n  }\n\n  get metadata() {\n    return this._delegate.metadata;\n  }\n\n  get size() {\n    return this._delegate.size;\n  }\n\n  get empty() {\n    return this._delegate.empty;\n  }\n\n  get docs() {\n    return this._delegate.docs.map(doc => new QueryDocumentSnapshot(this._firestore, doc));\n  }\n\n  docChanges(options) {\n    return this._delegate.docChanges(options).map(docChange => new DocumentChange(this._firestore, docChange));\n  }\n\n  forEach(callback, thisArg) {\n    this._delegate.forEach(snapshot => {\n      callback.call(thisArg, new QueryDocumentSnapshot(this._firestore, snapshot));\n    });\n  }\n\n  isEqual(other) {\n    return snapshotEqual(this._delegate, other._delegate);\n  }\n\n}\n\nclass CollectionReference extends Query {\n  constructor(firestore, _delegate) {\n    super(firestore, _delegate);\n    this.firestore = firestore;\n    this._delegate = _delegate;\n  }\n\n  get id() {\n    return this._delegate.id;\n  }\n\n  get path() {\n    return this._delegate.path;\n  }\n\n  get parent() {\n    const docRef = this._delegate.parent;\n    return docRef ? new DocumentReference(this.firestore, docRef) : null;\n  }\n\n  doc(documentPath) {\n    try {\n      if (documentPath === undefined) {\n        // Call `doc` without `documentPath` if `documentPath` is `undefined`\n        // as `doc` validates the number of arguments to prevent users from\n        // accidentally passing `undefined`.\n        return new DocumentReference(this.firestore, doc(this._delegate));\n      } else {\n        return new DocumentReference(this.firestore, doc(this._delegate, documentPath));\n      }\n    } catch (e) {\n      throw replaceFunctionName(e, 'doc()', 'CollectionReference.doc()');\n    }\n  }\n\n  add(data) {\n    return addDoc(this._delegate, data).then(docRef => new DocumentReference(this.firestore, docRef));\n  }\n\n  isEqual(other) {\n    return refEqual(this._delegate, other._delegate);\n  }\n\n  withConverter(converter) {\n    return new CollectionReference(this.firestore, converter ? this._delegate.withConverter(FirestoreDataConverter.getInstance(this.firestore, converter)) : this._delegate.withConverter(null));\n  }\n\n}\n\nfunction castReference(documentRef) {\n  return _cast(documentRef, DocumentReference$1);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// The objects that are a part of this API are exposed to third-parties as\n// compiled javascript so we want to flag our private members with a leading\n// underscore to discourage their use.\n\n/**\r\n * A `FieldPath` refers to a field in a document. The path may consist of a\r\n * single field name (referring to a top-level field in the document), or a list\r\n * of field names (referring to a nested field in the document).\r\n */\n\n\nclass FieldPath {\n  /**\r\n   * Creates a FieldPath from the provided field names. If more than one field\r\n   * name is provided, the path will point to a nested field in a document.\r\n   *\r\n   * @param fieldNames - A list of field names.\r\n   */\n  constructor(...fieldNames) {\n    this._delegate = new FieldPath$1(...fieldNames);\n  }\n\n  static documentId() {\n    /**\r\n     * Internal Note: The backend doesn't technically support querying by\r\n     * document ID. Instead it queries by the entire document name (full path\r\n     * included), but in the cases we currently support documentId(), the net\r\n     * effect is the same.\r\n     */\n    return new FieldPath(_FieldPath.keyField().canonicalString());\n  }\n\n  isEqual(other) {\n    other = getModularInstance(other);\n\n    if (!(other instanceof FieldPath$1)) {\n      return false;\n    }\n\n    return this._delegate._internalPath.isEqual(other._internalPath);\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nclass FieldValue {\n  constructor(_delegate) {\n    this._delegate = _delegate;\n  }\n\n  static serverTimestamp() {\n    const delegate = serverTimestamp();\n    delegate._methodName = 'FieldValue.serverTimestamp';\n    return new FieldValue(delegate);\n  }\n\n  static delete() {\n    const delegate = deleteField();\n    delegate._methodName = 'FieldValue.delete';\n    return new FieldValue(delegate);\n  }\n\n  static arrayUnion(...elements) {\n    const delegate = arrayUnion(...elements);\n    delegate._methodName = 'FieldValue.arrayUnion';\n    return new FieldValue(delegate);\n  }\n\n  static arrayRemove(...elements) {\n    const delegate = arrayRemove(...elements);\n    delegate._methodName = 'FieldValue.arrayRemove';\n    return new FieldValue(delegate);\n  }\n\n  static increment(n) {\n    const delegate = increment(n);\n    delegate._methodName = 'FieldValue.increment';\n    return new FieldValue(delegate);\n  }\n\n  isEqual(other) {\n    return this._delegate.isEqual(other._delegate);\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst firestoreNamespace = {\n  Firestore,\n  GeoPoint,\n  Timestamp,\n  Blob,\n  Transaction,\n  WriteBatch,\n  DocumentReference,\n  DocumentSnapshot,\n  Query,\n  QueryDocumentSnapshot,\n  QuerySnapshot,\n  CollectionReference,\n  FieldPath,\n  FieldValue,\n  setLogLevel,\n  CACHE_SIZE_UNLIMITED\n};\n/**\r\n * Configures Firestore as part of the Firebase SDK by calling registerComponent.\r\n *\r\n * @param firebase - The FirebaseNamespace to register Firestore with\r\n * @param firestoreFactory - A factory function that returns a new Firestore\r\n *    instance.\r\n */\n\nfunction configureForFirebase(firebase, firestoreFactory) {\n  firebase.INTERNAL.registerComponent(new Component('firestore-compat', container => {\n    const app = container.getProvider('app-compat').getImmediate();\n    const firestoreExp = container.getProvider('firestore').getImmediate();\n    return firestoreFactory(app, firestoreExp);\n  }, 'PUBLIC').setServiceProps(Object.assign({}, firestoreNamespace)));\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Registers the main Firestore build with the components framework.\r\n * Persistence can be enabled via `firebase.firestore().enablePersistence()`.\r\n */\n\n\nfunction registerFirestore(instance) {\n  configureForFirebase(instance, (app, firestoreExp) => new Firestore(app, firestoreExp, new IndexedDbPersistenceProvider()));\n  instance.registerVersion(name, version);\n}\n\nregisterFirestore(firebase);\nexport { registerFirestore }; //# sourceMappingURL=index.esm2017.js.map","map":null,"metadata":{},"sourceType":"module"}