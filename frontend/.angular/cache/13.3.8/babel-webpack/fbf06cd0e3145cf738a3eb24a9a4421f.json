{"ast":null,"code":"import _asyncToGenerator from \"/Users/leonardo/Desktop/GIT/angular-crud/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport '@firebase/installations';\nimport { Component } from '@firebase/component';\nimport { openDB, deleteDB } from 'idb';\nimport { ErrorFactory, validateIndexedDBOpenable, isIndexedDBAvailable, areCookiesEnabled, getModularInstance } from '@firebase/util';\nimport { _registerComponent, registerVersion, getApp, _getProvider } from '@firebase/app';\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nconst DEFAULT_SW_PATH = '/firebase-messaging-sw.js';\nconst DEFAULT_SW_SCOPE = '/firebase-cloud-messaging-push-scope';\nconst DEFAULT_VAPID_KEY = 'BDOU99-h67HcA6JeFXHbSNMu7e2yNNu3RzoMj8TM4W88jITfq7ZmPvIM1Iv-4_l2LxQcYwhqby2xGpWwzjfAnG4';\nconst ENDPOINT = 'https://fcmregistrations.googleapis.com/v1';\nconst CONSOLE_CAMPAIGN_ID = 'google.c.a.c_id';\nconst CONSOLE_CAMPAIGN_NAME = 'google.c.a.c_l';\nconst CONSOLE_CAMPAIGN_TIME = 'google.c.a.ts';\n/** Set to '1' if Analytics is enabled for the campaign */\n\nconst CONSOLE_CAMPAIGN_ANALYTICS_ENABLED = 'google.c.a.e';\nvar MessageType$1 = /*#__PURE__*/(() => {\n  (function (MessageType) {\n    MessageType[MessageType[\"DATA_MESSAGE\"] = 1] = \"DATA_MESSAGE\";\n    MessageType[MessageType[\"DISPLAY_NOTIFICATION\"] = 3] = \"DISPLAY_NOTIFICATION\";\n  })(MessageType$1 || (MessageType$1 = {}));\n\n  return MessageType$1;\n})();\n\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\r\n * in compliance with the License. You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software distributed under the License\r\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\r\n * or implied. See the License for the specific language governing permissions and limitations under\r\n * the License.\r\n */\nvar MessageType = /*#__PURE__*/(() => {\n  (function (MessageType) {\n    MessageType[\"PUSH_RECEIVED\"] = \"push-received\";\n    MessageType[\"NOTIFICATION_CLICKED\"] = \"notification-clicked\";\n  })(MessageType || (MessageType = {}));\n\n  return MessageType;\n})();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction arrayToBase64(array) {\n  const uint8Array = new Uint8Array(array);\n  const base64String = btoa(String.fromCharCode(...uint8Array));\n  return base64String.replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_');\n}\n\nfunction base64ToArray(base64String) {\n  const padding = '='.repeat((4 - base64String.length % 4) % 4);\n  const base64 = (base64String + padding).replace(/\\-/g, '+').replace(/_/g, '/');\n  const rawData = atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n\n  return outputArray;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst OLD_DB_NAME = 'fcm_token_details_db';\n/**\r\n * The last DB version of 'fcm_token_details_db' was 4. This is one higher, so that the upgrade\r\n * callback is called for all versions of the old DB.\r\n */\n\nconst OLD_DB_VERSION = 5;\nconst OLD_OBJECT_STORE_NAME = 'fcm_token_object_Store';\n\nfunction migrateOldDatabase(_x) {\n  return _migrateOldDatabase.apply(this, arguments);\n}\n\nfunction _migrateOldDatabase() {\n  _migrateOldDatabase = _asyncToGenerator(function* (senderId) {\n    if ('databases' in indexedDB) {\n      // indexedDb.databases() is an IndexedDB v3 API and does not exist in all browsers. TODO: Remove\n      // typecast when it lands in TS types.\n      const databases = yield indexedDB.databases();\n      const dbNames = databases.map(db => db.name);\n\n      if (!dbNames.includes(OLD_DB_NAME)) {\n        // old DB didn't exist, no need to open.\n        return null;\n      }\n    }\n\n    let tokenDetails = null;\n    const db = yield openDB(OLD_DB_NAME, OLD_DB_VERSION, {\n      upgrade: function () {\n        var _ref = _asyncToGenerator(function* (db, oldVersion, newVersion, upgradeTransaction) {\n          var _a;\n\n          if (oldVersion < 2) {\n            // Database too old, skip migration.\n            return;\n          }\n\n          if (!db.objectStoreNames.contains(OLD_OBJECT_STORE_NAME)) {\n            // Database did not exist. Nothing to do.\n            return;\n          }\n\n          const objectStore = upgradeTransaction.objectStore(OLD_OBJECT_STORE_NAME);\n          const value = yield objectStore.index('fcmSenderId').get(senderId);\n          yield objectStore.clear();\n\n          if (!value) {\n            // No entry in the database, nothing to migrate.\n            return;\n          }\n\n          if (oldVersion === 2) {\n            const oldDetails = value;\n\n            if (!oldDetails.auth || !oldDetails.p256dh || !oldDetails.endpoint) {\n              return;\n            }\n\n            tokenDetails = {\n              token: oldDetails.fcmToken,\n              createTime: (_a = oldDetails.createTime) !== null && _a !== void 0 ? _a : Date.now(),\n              subscriptionOptions: {\n                auth: oldDetails.auth,\n                p256dh: oldDetails.p256dh,\n                endpoint: oldDetails.endpoint,\n                swScope: oldDetails.swScope,\n                vapidKey: typeof oldDetails.vapidKey === 'string' ? oldDetails.vapidKey : arrayToBase64(oldDetails.vapidKey)\n              }\n            };\n          } else if (oldVersion === 3) {\n            const oldDetails = value;\n            tokenDetails = {\n              token: oldDetails.fcmToken,\n              createTime: oldDetails.createTime,\n              subscriptionOptions: {\n                auth: arrayToBase64(oldDetails.auth),\n                p256dh: arrayToBase64(oldDetails.p256dh),\n                endpoint: oldDetails.endpoint,\n                swScope: oldDetails.swScope,\n                vapidKey: arrayToBase64(oldDetails.vapidKey)\n              }\n            };\n          } else if (oldVersion === 4) {\n            const oldDetails = value;\n            tokenDetails = {\n              token: oldDetails.fcmToken,\n              createTime: oldDetails.createTime,\n              subscriptionOptions: {\n                auth: arrayToBase64(oldDetails.auth),\n                p256dh: arrayToBase64(oldDetails.p256dh),\n                endpoint: oldDetails.endpoint,\n                swScope: oldDetails.swScope,\n                vapidKey: arrayToBase64(oldDetails.vapidKey)\n              }\n            };\n          }\n        });\n\n        return function upgrade(_x36, _x37, _x38, _x39) {\n          return _ref.apply(this, arguments);\n        };\n      }()\n    });\n    db.close(); // Delete all old databases.\n\n    yield deleteDB(OLD_DB_NAME);\n    yield deleteDB('fcm_vapid_details_db');\n    yield deleteDB('undefined');\n    return checkTokenDetails(tokenDetails) ? tokenDetails : null;\n  });\n  return _migrateOldDatabase.apply(this, arguments);\n}\n\nfunction checkTokenDetails(tokenDetails) {\n  if (!tokenDetails || !tokenDetails.subscriptionOptions) {\n    return false;\n  }\n\n  const {\n    subscriptionOptions\n  } = tokenDetails;\n  return typeof tokenDetails.createTime === 'number' && tokenDetails.createTime > 0 && typeof tokenDetails.token === 'string' && tokenDetails.token.length > 0 && typeof subscriptionOptions.auth === 'string' && subscriptionOptions.auth.length > 0 && typeof subscriptionOptions.p256dh === 'string' && subscriptionOptions.p256dh.length > 0 && typeof subscriptionOptions.endpoint === 'string' && subscriptionOptions.endpoint.length > 0 && typeof subscriptionOptions.swScope === 'string' && subscriptionOptions.swScope.length > 0 && typeof subscriptionOptions.vapidKey === 'string' && subscriptionOptions.vapidKey.length > 0;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// Exported for tests.\n\n\nconst DATABASE_NAME = 'firebase-messaging-database';\nconst DATABASE_VERSION = 1;\nconst OBJECT_STORE_NAME = 'firebase-messaging-store';\nlet dbPromise = null;\n\nfunction getDbPromise() {\n  if (!dbPromise) {\n    dbPromise = openDB(DATABASE_NAME, DATABASE_VERSION, {\n      upgrade: (upgradeDb, oldVersion) => {\n        // We don't use 'break' in this switch statement, the fall-through behavior is what we want,\n        // because if there are multiple versions between the old version and the current version, we\n        // want ALL the migrations that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (oldVersion) {\n          case 0:\n            upgradeDb.createObjectStore(OBJECT_STORE_NAME);\n        }\n      }\n    });\n  }\n\n  return dbPromise;\n}\n/** Gets record(s) from the objectStore that match the given key. */\n\n\nfunction dbGet(_x2) {\n  return _dbGet.apply(this, arguments);\n}\n/** Assigns or overwrites the record for the given key with the given value. */\n\n\nfunction _dbGet() {\n  _dbGet = _asyncToGenerator(function* (firebaseDependencies) {\n    const key = getKey(firebaseDependencies);\n    const db = yield getDbPromise();\n    const tokenDetails = yield db.transaction(OBJECT_STORE_NAME).objectStore(OBJECT_STORE_NAME).get(key);\n\n    if (tokenDetails) {\n      return tokenDetails;\n    } else {\n      // Check if there is a tokenDetails object in the old DB.\n      const oldTokenDetails = yield migrateOldDatabase(firebaseDependencies.appConfig.senderId);\n\n      if (oldTokenDetails) {\n        yield dbSet(firebaseDependencies, oldTokenDetails);\n        return oldTokenDetails;\n      }\n    }\n  });\n  return _dbGet.apply(this, arguments);\n}\n\nfunction dbSet(_x3, _x4) {\n  return _dbSet.apply(this, arguments);\n}\n/** Removes record(s) from the objectStore that match the given key. */\n\n\nfunction _dbSet() {\n  _dbSet = _asyncToGenerator(function* (firebaseDependencies, tokenDetails) {\n    const key = getKey(firebaseDependencies);\n    const db = yield getDbPromise();\n    const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n    yield tx.objectStore(OBJECT_STORE_NAME).put(tokenDetails, key);\n    yield tx.done;\n    return tokenDetails;\n  });\n  return _dbSet.apply(this, arguments);\n}\n\nfunction dbRemove(_x5) {\n  return _dbRemove.apply(this, arguments);\n}\n\nfunction _dbRemove() {\n  _dbRemove = _asyncToGenerator(function* (firebaseDependencies) {\n    const key = getKey(firebaseDependencies);\n    const db = yield getDbPromise();\n    const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n    yield tx.objectStore(OBJECT_STORE_NAME).delete(key);\n    yield tx.done;\n  });\n  return _dbRemove.apply(this, arguments);\n}\n\nfunction getKey({\n  appConfig\n}) {\n  return appConfig.appId;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst ERROR_MAP = {\n  [\"missing-app-config-values\"\n  /* MISSING_APP_CONFIG_VALUES */\n  ]: 'Missing App configuration value: \"{$valueName}\"',\n  [\"only-available-in-window\"\n  /* AVAILABLE_IN_WINDOW */\n  ]: 'This method is available in a Window context.',\n  [\"only-available-in-sw\"\n  /* AVAILABLE_IN_SW */\n  ]: 'This method is available in a service worker context.',\n  [\"permission-default\"\n  /* PERMISSION_DEFAULT */\n  ]: 'The notification permission was not granted and dismissed instead.',\n  [\"permission-blocked\"\n  /* PERMISSION_BLOCKED */\n  ]: 'The notification permission was not granted and blocked instead.',\n  [\"unsupported-browser\"\n  /* UNSUPPORTED_BROWSER */\n  ]: \"This browser doesn't support the API's required to use the Firebase SDK.\",\n  [\"indexed-db-unsupported\"\n  /* INDEXED_DB_UNSUPPORTED */\n  ]: \"This browser doesn't support indexedDb.open() (ex. Safari iFrame, Firefox Private Browsing, etc)\",\n  [\"failed-service-worker-registration\"\n  /* FAILED_DEFAULT_REGISTRATION */\n  ]: 'We are unable to register the default service worker. {$browserErrorMessage}',\n  [\"token-subscribe-failed\"\n  /* TOKEN_SUBSCRIBE_FAILED */\n  ]: 'A problem occurred while subscribing the user to FCM: {$errorInfo}',\n  [\"token-subscribe-no-token\"\n  /* TOKEN_SUBSCRIBE_NO_TOKEN */\n  ]: 'FCM returned no token when subscribing the user to push.',\n  [\"token-unsubscribe-failed\"\n  /* TOKEN_UNSUBSCRIBE_FAILED */\n  ]: 'A problem occurred while unsubscribing the ' + 'user from FCM: {$errorInfo}',\n  [\"token-update-failed\"\n  /* TOKEN_UPDATE_FAILED */\n  ]: 'A problem occurred while updating the user from FCM: {$errorInfo}',\n  [\"token-update-no-token\"\n  /* TOKEN_UPDATE_NO_TOKEN */\n  ]: 'FCM returned no token when updating the user to push.',\n  [\"use-sw-after-get-token\"\n  /* USE_SW_AFTER_GET_TOKEN */\n  ]: 'The useServiceWorker() method may only be called once and must be ' + 'called before calling getToken() to ensure your service worker is used.',\n  [\"invalid-sw-registration\"\n  /* INVALID_SW_REGISTRATION */\n  ]: 'The input to useServiceWorker() must be a ServiceWorkerRegistration.',\n  [\"invalid-bg-handler\"\n  /* INVALID_BG_HANDLER */\n  ]: 'The input to setBackgroundMessageHandler() must be a function.',\n  [\"invalid-vapid-key\"\n  /* INVALID_VAPID_KEY */\n  ]: 'The public VAPID key must be a string.',\n  [\"use-vapid-key-after-get-token\"\n  /* USE_VAPID_KEY_AFTER_GET_TOKEN */\n  ]: 'The usePublicVapidKey() method may only be called once and must be ' + 'called before calling getToken() to ensure your VAPID key is used.'\n};\nconst ERROR_FACTORY = new ErrorFactory('messaging', 'Messaging', ERROR_MAP);\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nfunction requestGetToken(_x6, _x7) {\n  return _requestGetToken.apply(this, arguments);\n}\n\nfunction _requestGetToken() {\n  _requestGetToken = _asyncToGenerator(function* (firebaseDependencies, subscriptionOptions) {\n    var _a;\n\n    const headers = yield getHeaders(firebaseDependencies);\n    const body = getBody(subscriptionOptions);\n    const subscribeOptions = {\n      method: 'POST',\n      headers,\n      body: JSON.stringify(body)\n    };\n    let responseData;\n\n    try {\n      const response = yield fetch(getEndpoint(firebaseDependencies.appConfig), subscribeOptions);\n      responseData = yield response.json();\n    } catch (err) {\n      throw ERROR_FACTORY.create(\"token-subscribe-failed\"\n      /* TOKEN_SUBSCRIBE_FAILED */\n      , {\n        errorInfo: (_a = err) === null || _a === void 0 ? void 0 : _a.toString()\n      });\n    }\n\n    if (responseData.error) {\n      const message = responseData.error.message;\n      throw ERROR_FACTORY.create(\"token-subscribe-failed\"\n      /* TOKEN_SUBSCRIBE_FAILED */\n      , {\n        errorInfo: message\n      });\n    }\n\n    if (!responseData.token) {\n      throw ERROR_FACTORY.create(\"token-subscribe-no-token\"\n      /* TOKEN_SUBSCRIBE_NO_TOKEN */\n      );\n    }\n\n    return responseData.token;\n  });\n  return _requestGetToken.apply(this, arguments);\n}\n\nfunction requestUpdateToken(_x8, _x9) {\n  return _requestUpdateToken.apply(this, arguments);\n}\n\nfunction _requestUpdateToken() {\n  _requestUpdateToken = _asyncToGenerator(function* (firebaseDependencies, tokenDetails) {\n    var _a;\n\n    const headers = yield getHeaders(firebaseDependencies);\n    const body = getBody(tokenDetails.subscriptionOptions);\n    const updateOptions = {\n      method: 'PATCH',\n      headers,\n      body: JSON.stringify(body)\n    };\n    let responseData;\n\n    try {\n      const response = yield fetch(`${getEndpoint(firebaseDependencies.appConfig)}/${tokenDetails.token}`, updateOptions);\n      responseData = yield response.json();\n    } catch (err) {\n      throw ERROR_FACTORY.create(\"token-update-failed\"\n      /* TOKEN_UPDATE_FAILED */\n      , {\n        errorInfo: (_a = err) === null || _a === void 0 ? void 0 : _a.toString()\n      });\n    }\n\n    if (responseData.error) {\n      const message = responseData.error.message;\n      throw ERROR_FACTORY.create(\"token-update-failed\"\n      /* TOKEN_UPDATE_FAILED */\n      , {\n        errorInfo: message\n      });\n    }\n\n    if (!responseData.token) {\n      throw ERROR_FACTORY.create(\"token-update-no-token\"\n      /* TOKEN_UPDATE_NO_TOKEN */\n      );\n    }\n\n    return responseData.token;\n  });\n  return _requestUpdateToken.apply(this, arguments);\n}\n\nfunction requestDeleteToken(_x10, _x11) {\n  return _requestDeleteToken.apply(this, arguments);\n}\n\nfunction _requestDeleteToken() {\n  _requestDeleteToken = _asyncToGenerator(function* (firebaseDependencies, token) {\n    var _a;\n\n    const headers = yield getHeaders(firebaseDependencies);\n    const unsubscribeOptions = {\n      method: 'DELETE',\n      headers\n    };\n\n    try {\n      const response = yield fetch(`${getEndpoint(firebaseDependencies.appConfig)}/${token}`, unsubscribeOptions);\n      const responseData = yield response.json();\n\n      if (responseData.error) {\n        const message = responseData.error.message;\n        throw ERROR_FACTORY.create(\"token-unsubscribe-failed\"\n        /* TOKEN_UNSUBSCRIBE_FAILED */\n        , {\n          errorInfo: message\n        });\n      }\n    } catch (err) {\n      throw ERROR_FACTORY.create(\"token-unsubscribe-failed\"\n      /* TOKEN_UNSUBSCRIBE_FAILED */\n      , {\n        errorInfo: (_a = err) === null || _a === void 0 ? void 0 : _a.toString()\n      });\n    }\n  });\n  return _requestDeleteToken.apply(this, arguments);\n}\n\nfunction getEndpoint({\n  projectId\n}) {\n  return `${ENDPOINT}/projects/${projectId}/registrations`;\n}\n\nfunction getHeaders(_x12) {\n  return _getHeaders.apply(this, arguments);\n}\n\nfunction _getHeaders() {\n  _getHeaders = _asyncToGenerator(function* ({\n    appConfig,\n    installations\n  }) {\n    const authToken = yield installations.getToken();\n    return new Headers({\n      'Content-Type': 'application/json',\n      Accept: 'application/json',\n      'x-goog-api-key': appConfig.apiKey,\n      'x-goog-firebase-installations-auth': `FIS ${authToken}`\n    });\n  });\n  return _getHeaders.apply(this, arguments);\n}\n\nfunction getBody({\n  p256dh,\n  auth,\n  endpoint,\n  vapidKey\n}) {\n  const body = {\n    web: {\n      endpoint,\n      auth,\n      p256dh\n    }\n  };\n\n  if (vapidKey !== DEFAULT_VAPID_KEY) {\n    body.web.applicationPubKey = vapidKey;\n  }\n\n  return body;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// UpdateRegistration will be called once every week.\n\n\nconst TOKEN_EXPIRATION_MS = 7 * 24 * 60 * 60 * 1000; // 7 days\n\nfunction getTokenInternal(_x13) {\n  return _getTokenInternal.apply(this, arguments);\n}\n/**\r\n * This method deletes the token from the database, unsubscribes the token from FCM, and unregisters\r\n * the push subscription if it exists.\r\n */\n\n\nfunction _getTokenInternal() {\n  _getTokenInternal = _asyncToGenerator(function* (messaging) {\n    const pushSubscription = yield getPushSubscription(messaging.swRegistration, messaging.vapidKey);\n    const subscriptionOptions = {\n      vapidKey: messaging.vapidKey,\n      swScope: messaging.swRegistration.scope,\n      endpoint: pushSubscription.endpoint,\n      auth: arrayToBase64(pushSubscription.getKey('auth')),\n      p256dh: arrayToBase64(pushSubscription.getKey('p256dh'))\n    };\n    const tokenDetails = yield dbGet(messaging.firebaseDependencies);\n\n    if (!tokenDetails) {\n      // No token, get a new one.\n      return getNewToken(messaging.firebaseDependencies, subscriptionOptions);\n    } else if (!isTokenValid(tokenDetails.subscriptionOptions, subscriptionOptions)) {\n      // Invalid token, get a new one.\n      try {\n        yield requestDeleteToken(messaging.firebaseDependencies, tokenDetails.token);\n      } catch (e) {\n        // Suppress errors because of #2364\n        console.warn(e);\n      }\n\n      return getNewToken(messaging.firebaseDependencies, subscriptionOptions);\n    } else if (Date.now() >= tokenDetails.createTime + TOKEN_EXPIRATION_MS) {\n      // Weekly token refresh\n      return updateToken(messaging, {\n        token: tokenDetails.token,\n        createTime: Date.now(),\n        subscriptionOptions\n      });\n    } else {\n      // Valid token, nothing to do.\n      return tokenDetails.token;\n    }\n  });\n  return _getTokenInternal.apply(this, arguments);\n}\n\nfunction deleteTokenInternal(_x14) {\n  return _deleteTokenInternal.apply(this, arguments);\n}\n\nfunction _deleteTokenInternal() {\n  _deleteTokenInternal = _asyncToGenerator(function* (messaging) {\n    const tokenDetails = yield dbGet(messaging.firebaseDependencies);\n\n    if (tokenDetails) {\n      yield requestDeleteToken(messaging.firebaseDependencies, tokenDetails.token);\n      yield dbRemove(messaging.firebaseDependencies);\n    } // Unsubscribe from the push subscription.\n\n\n    const pushSubscription = yield messaging.swRegistration.pushManager.getSubscription();\n\n    if (pushSubscription) {\n      return pushSubscription.unsubscribe();\n    } // If there's no SW, consider it a success.\n\n\n    return true;\n  });\n  return _deleteTokenInternal.apply(this, arguments);\n}\n\nfunction updateToken(_x15, _x16) {\n  return _updateToken.apply(this, arguments);\n}\n\nfunction _updateToken() {\n  _updateToken = _asyncToGenerator(function* (messaging, tokenDetails) {\n    try {\n      const updatedToken = yield requestUpdateToken(messaging.firebaseDependencies, tokenDetails);\n      const updatedTokenDetails = Object.assign(Object.assign({}, tokenDetails), {\n        token: updatedToken,\n        createTime: Date.now()\n      });\n      yield dbSet(messaging.firebaseDependencies, updatedTokenDetails);\n      return updatedToken;\n    } catch (e) {\n      yield deleteTokenInternal(messaging);\n      throw e;\n    }\n  });\n  return _updateToken.apply(this, arguments);\n}\n\nfunction getNewToken(_x17, _x18) {\n  return _getNewToken.apply(this, arguments);\n}\n/**\r\n * Gets a PushSubscription for the current user.\r\n */\n\n\nfunction _getNewToken() {\n  _getNewToken = _asyncToGenerator(function* (firebaseDependencies, subscriptionOptions) {\n    const token = yield requestGetToken(firebaseDependencies, subscriptionOptions);\n    const tokenDetails = {\n      token,\n      createTime: Date.now(),\n      subscriptionOptions\n    };\n    yield dbSet(firebaseDependencies, tokenDetails);\n    return tokenDetails.token;\n  });\n  return _getNewToken.apply(this, arguments);\n}\n\nfunction getPushSubscription(_x19, _x20) {\n  return _getPushSubscription.apply(this, arguments);\n}\n/**\r\n * Checks if the saved tokenDetails object matches the configuration provided.\r\n */\n\n\nfunction _getPushSubscription() {\n  _getPushSubscription = _asyncToGenerator(function* (swRegistration, vapidKey) {\n    const subscription = yield swRegistration.pushManager.getSubscription();\n\n    if (subscription) {\n      return subscription;\n    }\n\n    return swRegistration.pushManager.subscribe({\n      userVisibleOnly: true,\n      // Chrome <= 75 doesn't support base64-encoded VAPID key. For backward compatibility, VAPID key\n      // submitted to pushManager#subscribe must be of type Uint8Array.\n      applicationServerKey: base64ToArray(vapidKey)\n    });\n  });\n  return _getPushSubscription.apply(this, arguments);\n}\n\nfunction isTokenValid(dbOptions, currentOptions) {\n  const isVapidKeyEqual = currentOptions.vapidKey === dbOptions.vapidKey;\n  const isEndpointEqual = currentOptions.endpoint === dbOptions.endpoint;\n  const isAuthEqual = currentOptions.auth === dbOptions.auth;\n  const isP256dhEqual = currentOptions.p256dh === dbOptions.p256dh;\n  return isVapidKeyEqual && isEndpointEqual && isAuthEqual && isP256dhEqual;\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction externalizePayload(internalPayload) {\n  const payload = {\n    from: internalPayload.from,\n    // eslint-disable-next-line camelcase\n    collapseKey: internalPayload.collapse_key,\n    // eslint-disable-next-line camelcase\n    messageId: internalPayload.fcmMessageId\n  };\n  propagateNotificationPayload(payload, internalPayload);\n  propagateDataPayload(payload, internalPayload);\n  propagateFcmOptions(payload, internalPayload);\n  return payload;\n}\n\nfunction propagateNotificationPayload(payload, messagePayloadInternal) {\n  if (!messagePayloadInternal.notification) {\n    return;\n  }\n\n  payload.notification = {};\n  const title = messagePayloadInternal.notification.title;\n\n  if (!!title) {\n    payload.notification.title = title;\n  }\n\n  const body = messagePayloadInternal.notification.body;\n\n  if (!!body) {\n    payload.notification.body = body;\n  }\n\n  const image = messagePayloadInternal.notification.image;\n\n  if (!!image) {\n    payload.notification.image = image;\n  }\n}\n\nfunction propagateDataPayload(payload, messagePayloadInternal) {\n  if (!messagePayloadInternal.data) {\n    return;\n  }\n\n  payload.data = messagePayloadInternal.data;\n}\n\nfunction propagateFcmOptions(payload, messagePayloadInternal) {\n  var _a, _b, _c, _d, _e; // fcmOptions.link value is written into notification.click_action. see more in b/232072111\n\n\n  if (!messagePayloadInternal.fcmOptions && !((_a = messagePayloadInternal.notification) === null || _a === void 0 ? void 0 : _a.click_action)) {\n    return;\n  }\n\n  payload.fcmOptions = {};\n  const link = (_c = (_b = messagePayloadInternal.fcmOptions) === null || _b === void 0 ? void 0 : _b.link) !== null && _c !== void 0 ? _c : (_d = messagePayloadInternal.notification) === null || _d === void 0 ? void 0 : _d.click_action;\n\n  if (!!link) {\n    payload.fcmOptions.link = link;\n  } // eslint-disable-next-line camelcase\n\n\n  const analyticsLabel = (_e = messagePayloadInternal.fcmOptions) === null || _e === void 0 ? void 0 : _e.analytics_label;\n\n  if (!!analyticsLabel) {\n    payload.fcmOptions.analyticsLabel = analyticsLabel;\n  }\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction isConsoleMessage(data) {\n  // This message has a campaign ID, meaning it was sent using the Firebase Console.\n  return typeof data === 'object' && !!data && CONSOLE_CAMPAIGN_ID in data;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\n_mergeStrings('hts/frbslgigp.ogepscmv/ieo/eaylg', 'tp:/ieaeogn-agolai.o/1frlglgc/o');\n\n_mergeStrings('AzSCbw63g1R0nCw85jG8', 'Iaya3yLKwmgvh7cF0q4');\n\nfunction _mergeStrings(s1, s2) {\n  const resultArray = [];\n\n  for (let i = 0; i < s1.length; i++) {\n    resultArray.push(s1.charAt(i));\n\n    if (i < s2.length) {\n      resultArray.push(s2.charAt(i));\n    }\n  }\n\n  return resultArray.join('');\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction extractAppConfig(app) {\n  if (!app || !app.options) {\n    throw getMissingValueError('App Configuration Object');\n  }\n\n  if (!app.name) {\n    throw getMissingValueError('App Name');\n  } // Required app config keys\n\n\n  const configKeys = ['projectId', 'apiKey', 'appId', 'messagingSenderId'];\n  const {\n    options\n  } = app;\n\n  for (const keyName of configKeys) {\n    if (!options[keyName]) {\n      throw getMissingValueError(keyName);\n    }\n  }\n\n  return {\n    appName: app.name,\n    projectId: options.projectId,\n    apiKey: options.apiKey,\n    appId: options.appId,\n    senderId: options.messagingSenderId\n  };\n}\n\nfunction getMissingValueError(valueName) {\n  return ERROR_FACTORY.create(\"missing-app-config-values\"\n  /* MISSING_APP_CONFIG_VALUES */\n  , {\n    valueName\n  });\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nclass MessagingService {\n  constructor(app, installations, analyticsProvider) {\n    // logging is only done with end user consent. Default to false.\n    this.deliveryMetricsExportedToBigQueryEnabled = false;\n    this.onBackgroundMessageHandler = null;\n    this.onMessageHandler = null;\n    this.logEvents = [];\n    this.isLogServiceStarted = false;\n    const appConfig = extractAppConfig(app);\n    this.firebaseDependencies = {\n      app,\n      appConfig,\n      installations,\n      analyticsProvider\n    };\n  }\n\n  _delete() {\n    return Promise.resolve();\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction registerDefaultSw(_x21) {\n  return _registerDefaultSw.apply(this, arguments);\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction _registerDefaultSw() {\n  _registerDefaultSw = _asyncToGenerator(function* (messaging) {\n    var _a;\n\n    try {\n      messaging.swRegistration = yield navigator.serviceWorker.register(DEFAULT_SW_PATH, {\n        scope: DEFAULT_SW_SCOPE\n      }); // The timing when browser updates sw when sw has an update is unreliable from experiment. It\n      // leads to version conflict when the SDK upgrades to a newer version in the main page, but sw\n      // is stuck with the old version. For example,\n      // https://github.com/firebase/firebase-js-sdk/issues/2590 The following line reliably updates\n      // sw if there was an update.\n\n      messaging.swRegistration.update().catch(() => {\n        /* it is non blocking and we don't care if it failed */\n      });\n    } catch (e) {\n      throw ERROR_FACTORY.create(\"failed-service-worker-registration\"\n      /* FAILED_DEFAULT_REGISTRATION */\n      , {\n        browserErrorMessage: (_a = e) === null || _a === void 0 ? void 0 : _a.message\n      });\n    }\n  });\n  return _registerDefaultSw.apply(this, arguments);\n}\n\nfunction updateSwReg(_x22, _x23) {\n  return _updateSwReg.apply(this, arguments);\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction _updateSwReg() {\n  _updateSwReg = _asyncToGenerator(function* (messaging, swRegistration) {\n    if (!swRegistration && !messaging.swRegistration) {\n      yield registerDefaultSw(messaging);\n    }\n\n    if (!swRegistration && !!messaging.swRegistration) {\n      return;\n    }\n\n    if (!(swRegistration instanceof ServiceWorkerRegistration)) {\n      throw ERROR_FACTORY.create(\"invalid-sw-registration\"\n      /* INVALID_SW_REGISTRATION */\n      );\n    }\n\n    messaging.swRegistration = swRegistration;\n  });\n  return _updateSwReg.apply(this, arguments);\n}\n\nfunction updateVapidKey(_x24, _x25) {\n  return _updateVapidKey.apply(this, arguments);\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction _updateVapidKey() {\n  _updateVapidKey = _asyncToGenerator(function* (messaging, vapidKey) {\n    if (!!vapidKey) {\n      messaging.vapidKey = vapidKey;\n    } else if (!messaging.vapidKey) {\n      messaging.vapidKey = DEFAULT_VAPID_KEY;\n    }\n  });\n  return _updateVapidKey.apply(this, arguments);\n}\n\nfunction getToken$1(_x26, _x27) {\n  return _getToken$.apply(this, arguments);\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction _getToken$() {\n  _getToken$ = _asyncToGenerator(function* (messaging, options) {\n    if (!navigator) {\n      throw ERROR_FACTORY.create(\"only-available-in-window\"\n      /* AVAILABLE_IN_WINDOW */\n      );\n    }\n\n    if (Notification.permission === 'default') {\n      yield Notification.requestPermission();\n    }\n\n    if (Notification.permission !== 'granted') {\n      throw ERROR_FACTORY.create(\"permission-blocked\"\n      /* PERMISSION_BLOCKED */\n      );\n    }\n\n    yield updateVapidKey(messaging, options === null || options === void 0 ? void 0 : options.vapidKey);\n    yield updateSwReg(messaging, options === null || options === void 0 ? void 0 : options.serviceWorkerRegistration);\n    return getTokenInternal(messaging);\n  });\n  return _getToken$.apply(this, arguments);\n}\n\nfunction logToScion(_x28, _x29, _x30) {\n  return _logToScion.apply(this, arguments);\n}\n\nfunction _logToScion() {\n  _logToScion = _asyncToGenerator(function* (messaging, messageType, data) {\n    const eventType = getEventType(messageType);\n    const analytics = yield messaging.firebaseDependencies.analyticsProvider.get();\n    analytics.logEvent(eventType, {\n      /* eslint-disable camelcase */\n      message_id: data[CONSOLE_CAMPAIGN_ID],\n      message_name: data[CONSOLE_CAMPAIGN_NAME],\n      message_time: data[CONSOLE_CAMPAIGN_TIME],\n      message_device_time: Math.floor(Date.now() / 1000)\n      /* eslint-enable camelcase */\n\n    });\n  });\n  return _logToScion.apply(this, arguments);\n}\n\nfunction getEventType(messageType) {\n  switch (messageType) {\n    case MessageType.NOTIFICATION_CLICKED:\n      return 'notification_open';\n\n    case MessageType.PUSH_RECEIVED:\n      return 'notification_foreground';\n\n    default:\n      throw new Error();\n  }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction messageEventListener(_x31, _x32) {\n  return _messageEventListener.apply(this, arguments);\n}\n\nfunction _messageEventListener() {\n  _messageEventListener = _asyncToGenerator(function* (messaging, event) {\n    const internalPayload = event.data;\n\n    if (!internalPayload.isFirebaseMessaging) {\n      return;\n    }\n\n    if (messaging.onMessageHandler && internalPayload.messageType === MessageType.PUSH_RECEIVED) {\n      if (typeof messaging.onMessageHandler === 'function') {\n        messaging.onMessageHandler(externalizePayload(internalPayload));\n      } else {\n        messaging.onMessageHandler.next(externalizePayload(internalPayload));\n      }\n    } // Log to Scion if applicable\n\n\n    const dataPayload = internalPayload.data;\n\n    if (isConsoleMessage(dataPayload) && dataPayload[CONSOLE_CAMPAIGN_ANALYTICS_ENABLED] === '1') {\n      yield logToScion(messaging, internalPayload.messageType, dataPayload);\n    }\n  });\n  return _messageEventListener.apply(this, arguments);\n}\n\nconst name = \"@firebase/messaging\";\nconst version = \"0.9.15\";\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nconst WindowMessagingFactory = container => {\n  const messaging = new MessagingService(container.getProvider('app').getImmediate(), container.getProvider('installations-internal').getImmediate(), container.getProvider('analytics-internal'));\n  navigator.serviceWorker.addEventListener('message', e => messageEventListener(messaging, e));\n  return messaging;\n};\n\nconst WindowMessagingInternalFactory = container => {\n  const messaging = container.getProvider('messaging').getImmediate();\n  const messagingInternal = {\n    getToken: options => getToken$1(messaging, options)\n  };\n  return messagingInternal;\n};\n\nfunction registerMessagingInWindow() {\n  _registerComponent(new Component('messaging', WindowMessagingFactory, \"PUBLIC\"\n  /* PUBLIC */\n  ));\n\n  _registerComponent(new Component('messaging-internal', WindowMessagingInternalFactory, \"PRIVATE\"\n  /* PRIVATE */\n  ));\n\n  registerVersion(name, version); // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n\n  registerVersion(name, version, 'esm2017');\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Checks if all required APIs exist in the browser.\r\n * @returns a Promise that resolves to a boolean.\r\n *\r\n * @public\r\n */\n\n\nfunction isWindowSupported() {\n  return _isWindowSupported.apply(this, arguments);\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction _isWindowSupported() {\n  _isWindowSupported = _asyncToGenerator(function* () {\n    try {\n      // This throws if open() is unsupported, so adding it to the conditional\n      // statement below can cause an uncaught error.\n      yield validateIndexedDBOpenable();\n    } catch (e) {\n      return false;\n    } // firebase-js-sdk/issues/2393 reveals that idb#open in Safari iframe and Firefox private browsing\n    // might be prohibited to run. In these contexts, an error would be thrown during the messaging\n    // instantiating phase, informing the developers to import/call isSupported for special handling.\n\n\n    return typeof window !== 'undefined' && isIndexedDBAvailable() && areCookiesEnabled() && 'serviceWorker' in navigator && 'PushManager' in window && 'Notification' in window && 'fetch' in window && ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') && PushSubscription.prototype.hasOwnProperty('getKey');\n  });\n  return _isWindowSupported.apply(this, arguments);\n}\n\nfunction deleteToken$1(_x33) {\n  return _deleteToken$.apply(this, arguments);\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction _deleteToken$() {\n  _deleteToken$ = _asyncToGenerator(function* (messaging) {\n    if (!navigator) {\n      throw ERROR_FACTORY.create(\"only-available-in-window\"\n      /* AVAILABLE_IN_WINDOW */\n      );\n    }\n\n    if (!messaging.swRegistration) {\n      yield registerDefaultSw(messaging);\n    }\n\n    return deleteTokenInternal(messaging);\n  });\n  return _deleteToken$.apply(this, arguments);\n}\n\nfunction onMessage$1(messaging, nextOrObserver) {\n  if (!navigator) {\n    throw ERROR_FACTORY.create(\"only-available-in-window\"\n    /* AVAILABLE_IN_WINDOW */\n    );\n  }\n\n  messaging.onMessageHandler = nextOrObserver;\n  return () => {\n    messaging.onMessageHandler = null;\n  };\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Retrieves a Firebase Cloud Messaging instance.\r\n *\r\n * @returns The Firebase Cloud Messaging instance associated with the provided firebase app.\r\n *\r\n * @public\r\n */\n\n\nfunction getMessagingInWindow(app = getApp()) {\n  // Conscious decision to make this async check non-blocking during the messaging instance\n  // initialization phase for performance consideration. An error would be thrown latter for\n  // developer's information. Developers can then choose to import and call `isSupported` for\n  // special handling.\n  isWindowSupported().then(isSupported => {\n    // If `isWindowSupported()` resolved, but returned false.\n    if (!isSupported) {\n      throw ERROR_FACTORY.create(\"unsupported-browser\"\n      /* UNSUPPORTED_BROWSER */\n      );\n    }\n  }, _ => {\n    // If `isWindowSupported()` rejected.\n    throw ERROR_FACTORY.create(\"indexed-db-unsupported\"\n    /* INDEXED_DB_UNSUPPORTED */\n    );\n  });\n  return _getProvider(getModularInstance(app), 'messaging').getImmediate();\n}\n/**\r\n * Subscribes the {@link Messaging} instance to push notifications. Returns an Firebase Cloud\r\n * Messaging registration token that can be used to send push messages to that {@link Messaging}\r\n * instance.\r\n *\r\n * If a notification permission isn't already granted, this method asks the user for permission. The\r\n * returned promise rejects if the user does not allow the app to show notifications.\r\n *\r\n * @param messaging - The {@link Messaging} instance.\r\n * @param options - Provides an optional vapid key and an optinoal service worker registration\r\n *\r\n * @returns The promise resolves with an FCM registration token.\r\n *\r\n * @public\r\n */\n\n\nfunction getToken(_x34, _x35) {\n  return _getToken.apply(this, arguments);\n}\n/**\r\n * Deletes the registration token associated with this {@link Messaging} instance and unsubscribes\r\n * the {@link Messaging} instance from the push subscription.\r\n *\r\n * @param messaging - The {@link Messaging} instance.\r\n *\r\n * @returns The promise resolves when the token has been successfully deleted.\r\n *\r\n * @public\r\n */\n\n\nfunction _getToken() {\n  _getToken = _asyncToGenerator(function* (messaging, options) {\n    messaging = getModularInstance(messaging);\n    return getToken$1(messaging, options);\n  });\n  return _getToken.apply(this, arguments);\n}\n\nfunction deleteToken(messaging) {\n  messaging = getModularInstance(messaging);\n  return deleteToken$1(messaging);\n}\n/**\r\n * When a push message is received and the user is currently on a page for your origin, the\r\n * message is passed to the page and an `onMessage()` event is dispatched with the payload of\r\n * the push message.\r\n *\r\n *\r\n * @param messaging - The {@link Messaging} instance.\r\n * @param nextOrObserver - This function, or observer object with `next` defined,\r\n *     is called when a message is received and the user is currently viewing your page.\r\n * @returns To stop listening for messages execute this returned function.\r\n *\r\n * @public\r\n */\n\n\nfunction onMessage(messaging, nextOrObserver) {\n  messaging = getModularInstance(messaging);\n  return onMessage$1(messaging, nextOrObserver);\n}\n/**\r\n * Firebase Cloud Messaging\r\n *\r\n * @packageDocumentation\r\n */\n\n\nregisterMessagingInWindow();\nexport { deleteToken, getMessagingInWindow as getMessaging, getToken, isWindowSupported as isSupported, onMessage }; //# sourceMappingURL=index.esm2017.js.map","map":null,"metadata":{},"sourceType":"module"}