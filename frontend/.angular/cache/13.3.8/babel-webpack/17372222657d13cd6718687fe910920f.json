{"ast":null,"code":"import firebase from '@firebase/app-compat';\nimport { _getChild, uploadBytesResumable, StringFormat, _dataFromString, _UploadTask, _FbsBlob, listAll, list, getMetadata, updateMetadata, getDownloadURL, deleteObject, _invalidRootOperation, _invalidArgument, ref, _Location, connectStorageEmulator, _TaskState, _TaskEvent } from '@firebase/storage';\nimport { Component } from '@firebase/component';\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nclass UploadTaskSnapshotCompat {\n  constructor(_delegate, task, ref) {\n    this._delegate = _delegate;\n    this.task = task;\n    this.ref = ref;\n  }\n\n  get bytesTransferred() {\n    return this._delegate.bytesTransferred;\n  }\n\n  get metadata() {\n    return this._delegate.metadata;\n  }\n\n  get state() {\n    return this._delegate.state;\n  }\n\n  get totalBytes() {\n    return this._delegate.totalBytes;\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nclass UploadTaskCompat {\n  constructor(_delegate, _ref) {\n    this._delegate = _delegate;\n    this._ref = _ref;\n    this.cancel = this._delegate.cancel.bind(this._delegate);\n    this.catch = this._delegate.catch.bind(this._delegate);\n    this.pause = this._delegate.pause.bind(this._delegate);\n    this.resume = this._delegate.resume.bind(this._delegate);\n  }\n\n  get snapshot() {\n    return new UploadTaskSnapshotCompat(this._delegate.snapshot, this, this._ref);\n  }\n\n  then(onFulfilled, onRejected) {\n    return this._delegate.then(snapshot => {\n      if (onFulfilled) {\n        return onFulfilled(new UploadTaskSnapshotCompat(snapshot, this, this._ref));\n      }\n    }, onRejected);\n  }\n\n  on(type, nextOrObserver, error, completed) {\n    let wrappedNextOrObserver = undefined;\n\n    if (!!nextOrObserver) {\n      if (typeof nextOrObserver === 'function') {\n        wrappedNextOrObserver = taskSnapshot => nextOrObserver(new UploadTaskSnapshotCompat(taskSnapshot, this, this._ref));\n      } else {\n        wrappedNextOrObserver = {\n          next: !!nextOrObserver.next ? taskSnapshot => nextOrObserver.next(new UploadTaskSnapshotCompat(taskSnapshot, this, this._ref)) : undefined,\n          complete: nextOrObserver.complete || undefined,\n          error: nextOrObserver.error || undefined\n        };\n      }\n    }\n\n    return this._delegate.on(type, wrappedNextOrObserver, error || undefined, completed || undefined);\n  }\n\n}\n\nclass ListResultCompat {\n  constructor(_delegate, _service) {\n    this._delegate = _delegate;\n    this._service = _service;\n  }\n\n  get prefixes() {\n    return this._delegate.prefixes.map(ref => new ReferenceCompat(ref, this._service));\n  }\n\n  get items() {\n    return this._delegate.items.map(ref => new ReferenceCompat(ref, this._service));\n  }\n\n  get nextPageToken() {\n    return this._delegate.nextPageToken || null;\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *  http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nclass ReferenceCompat {\n  constructor(_delegate, storage) {\n    this._delegate = _delegate;\n    this.storage = storage;\n  }\n\n  get name() {\n    return this._delegate.name;\n  }\n\n  get bucket() {\n    return this._delegate.bucket;\n  }\n\n  get fullPath() {\n    return this._delegate.fullPath;\n  }\n\n  toString() {\n    return this._delegate.toString();\n  }\n  /**\r\n   * @returns A reference to the object obtained by\r\n   * appending childPath, removing any duplicate, beginning, or trailing\r\n   * slashes.\r\n   */\n\n\n  child(childPath) {\n    const reference = _getChild(this._delegate, childPath);\n\n    return new ReferenceCompat(reference, this.storage);\n  }\n\n  get root() {\n    return new ReferenceCompat(this._delegate.root, this.storage);\n  }\n  /**\r\n   * @returns A reference to the parent of the\r\n   * current object, or null if the current object is the root.\r\n   */\n\n\n  get parent() {\n    const reference = this._delegate.parent;\n\n    if (reference == null) {\n      return null;\n    }\n\n    return new ReferenceCompat(reference, this.storage);\n  }\n  /**\r\n   * Uploads a blob to this object's location.\r\n   * @param data - The blob to upload.\r\n   * @returns An UploadTask that lets you control and\r\n   * observe the upload.\r\n   */\n\n\n  put(data, metadata) {\n    this._throwIfRoot('put');\n\n    return new UploadTaskCompat(uploadBytesResumable(this._delegate, data, metadata), this);\n  }\n  /**\r\n   * Uploads a string to this object's location.\r\n   * @param value - The string to upload.\r\n   * @param format - The format of the string to upload.\r\n   * @returns An UploadTask that lets you control and\r\n   * observe the upload.\r\n   */\n\n\n  putString(value, format = StringFormat.RAW, metadata) {\n    this._throwIfRoot('putString');\n\n    const data = _dataFromString(format, value);\n\n    const metadataClone = Object.assign({}, metadata);\n\n    if (metadataClone['contentType'] == null && data.contentType != null) {\n      metadataClone['contentType'] = data.contentType;\n    }\n\n    return new UploadTaskCompat(new _UploadTask(this._delegate, new _FbsBlob(data.data, true), metadataClone), this);\n  }\n  /**\r\n   * List all items (files) and prefixes (folders) under this storage reference.\r\n   *\r\n   * This is a helper method for calling list() repeatedly until there are\r\n   * no more results. The default pagination size is 1000.\r\n   *\r\n   * Note: The results may not be consistent if objects are changed while this\r\n   * operation is running.\r\n   *\r\n   * Warning: listAll may potentially consume too many resources if there are\r\n   * too many results.\r\n   *\r\n   * @returns A Promise that resolves with all the items and prefixes under\r\n   *  the current storage reference. `prefixes` contains references to\r\n   *  sub-directories and `items` contains references to objects in this\r\n   *  folder. `nextPageToken` is never returned.\r\n   */\n\n\n  listAll() {\n    return listAll(this._delegate).then(r => new ListResultCompat(r, this.storage));\n  }\n  /**\r\n   * List items (files) and prefixes (folders) under this storage reference.\r\n   *\r\n   * List API is only available for Firebase Rules Version 2.\r\n   *\r\n   * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n   * delimited folder structure. Refer to GCS's List API if you want to learn more.\r\n   *\r\n   * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n   * support objects whose paths end with \"/\" or contain two consecutive\r\n   * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n   * list() may fail if there are too many unsupported objects in the bucket.\r\n   *\r\n   * @param options - See ListOptions for details.\r\n   * @returns A Promise that resolves with the items and prefixes.\r\n   * `prefixes` contains references to sub-folders and `items`\r\n   * contains references to objects in this folder. `nextPageToken`\r\n   * can be used to get the rest of the results.\r\n   */\n\n\n  list(options) {\n    return list(this._delegate, options || undefined).then(r => new ListResultCompat(r, this.storage));\n  }\n  /**\r\n   * A `Promise` that resolves with the metadata for this object. If this\r\n   * object doesn't exist or metadata cannot be retreived, the promise is\r\n   * rejected.\r\n   */\n\n\n  getMetadata() {\n    return getMetadata(this._delegate);\n  }\n  /**\r\n   * Updates the metadata for this object.\r\n   * @param metadata - The new metadata for the object.\r\n   * Only values that have been explicitly set will be changed. Explicitly\r\n   * setting a value to null will remove the metadata.\r\n   * @returns A `Promise` that resolves\r\n   * with the new metadata for this object.\r\n   * @see firebaseStorage.Reference.prototype.getMetadata\r\n   */\n\n\n  updateMetadata(metadata) {\n    return updateMetadata(this._delegate, metadata);\n  }\n  /**\r\n   * @returns A `Promise` that resolves with the download\r\n   * URL for this object.\r\n   */\n\n\n  getDownloadURL() {\n    return getDownloadURL(this._delegate);\n  }\n  /**\r\n   * Deletes the object at this location.\r\n   * @returns A `Promise` that resolves if the deletion succeeds.\r\n   */\n\n\n  delete() {\n    this._throwIfRoot('delete');\n\n    return deleteObject(this._delegate);\n  }\n\n  _throwIfRoot(name) {\n    if (this._delegate._location.path === '') {\n      throw _invalidRootOperation(name);\n    }\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * A service that provides firebaseStorage.Reference instances.\r\n * @param opt_url gs:// url to a custom Storage Bucket\r\n */\n\n\nclass StorageServiceCompat {\n  constructor(app, _delegate) {\n    this.app = app;\n    this._delegate = _delegate;\n  }\n\n  get maxOperationRetryTime() {\n    return this._delegate.maxOperationRetryTime;\n  }\n\n  get maxUploadRetryTime() {\n    return this._delegate.maxUploadRetryTime;\n  }\n  /**\r\n   * Returns a firebaseStorage.Reference for the given path in the default\r\n   * bucket.\r\n   */\n\n\n  ref(path) {\n    if (isUrl(path)) {\n      throw _invalidArgument('ref() expected a child path but got a URL, use refFromURL instead.');\n    }\n\n    return new ReferenceCompat(ref(this._delegate, path), this);\n  }\n  /**\r\n   * Returns a firebaseStorage.Reference object for the given absolute URL,\r\n   * which must be a gs:// or http[s]:// URL.\r\n   */\n\n\n  refFromURL(url) {\n    if (!isUrl(url)) {\n      throw _invalidArgument('refFromURL() expected a full URL but got a child path, use ref() instead.');\n    }\n\n    try {\n      _Location.makeFromUrl(url, this._delegate.host);\n    } catch (e) {\n      throw _invalidArgument('refFromUrl() expected a valid full URL but got an invalid one.');\n    }\n\n    return new ReferenceCompat(ref(this._delegate, url), this);\n  }\n\n  setMaxUploadRetryTime(time) {\n    this._delegate.maxUploadRetryTime = time;\n  }\n\n  setMaxOperationRetryTime(time) {\n    this._delegate.maxOperationRetryTime = time;\n  }\n\n  useEmulator(host, port, options = {}) {\n    connectStorageEmulator(this._delegate, host, port, options);\n  }\n\n}\n\nfunction isUrl(path) {\n  return /^[A-Za-z]+:\\/\\//.test(path);\n}\n\nconst name = \"@firebase/storage-compat\";\nconst version = \"0.1.17\";\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Type constant for Firebase Storage.\r\n */\n\nconst STORAGE_TYPE = 'storage-compat';\n\nfunction factory(container, {\n  instanceIdentifier: url\n}) {\n  // Dependencies\n  const app = container.getProvider('app-compat').getImmediate();\n  const storageExp = container.getProvider('storage').getImmediate({\n    identifier: url\n  });\n  const storageServiceCompat = new StorageServiceCompat(app, storageExp);\n  return storageServiceCompat;\n}\n\nfunction registerStorage(instance) {\n  const namespaceExports = {\n    // no-inline\n    TaskState: _TaskState,\n    TaskEvent: _TaskEvent,\n    StringFormat,\n    Storage: StorageServiceCompat,\n    Reference: ReferenceCompat\n  };\n  instance.INTERNAL.registerComponent(new Component(STORAGE_TYPE, factory, \"PUBLIC\"\n  /* PUBLIC */\n  ).setServiceProps(namespaceExports).setMultipleInstances(true));\n  instance.registerVersion(name, version);\n}\n\nregisterStorage(firebase);\nexport { registerStorage }; //# sourceMappingURL=index.esm2017.js.map","map":null,"metadata":{},"sourceType":"module"}