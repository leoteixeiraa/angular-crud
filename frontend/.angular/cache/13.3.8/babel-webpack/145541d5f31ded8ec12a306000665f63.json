{"ast":null,"code":"import { EMPTY } from \"rxjs\";\nimport { map, catchError } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/snack-bar\";\nimport * as i2 from \"@angular/common/http\";\nexport let ProductService = /*#__PURE__*/(() => {\n  class ProductService {\n    constructor(snackBar, http) {\n      this.snackBar = snackBar;\n      this.http = http;\n      this.baseUrl = \"https://fake-server-shop.herokuapp.com/products\";\n    }\n\n    showMessage(msg, isError = false) {\n      this.snackBar.open(msg, \"X\", {\n        duration: 3000,\n        horizontalPosition: \"right\",\n        verticalPosition: \"top\",\n        panelClass: isError ? [\"msg-error\"] : [\"msg-success\"]\n      });\n    }\n\n    create(product) {\n      return this.http.post(this.baseUrl, product).pipe(map(obj => obj), catchError(e => this.errorHandler(e)));\n    }\n\n    read() {\n      return this.http.get(this.baseUrl).pipe(map(obj => obj), catchError(e => this.errorHandler(e)));\n    }\n\n    readById(id) {\n      const url = `${this.baseUrl}/${id}`;\n      return this.http.get(url).pipe(map(obj => obj), catchError(e => this.errorHandler(e)));\n    }\n\n    update(product) {\n      const url = `${this.baseUrl}/${product.id}`;\n      return this.http.put(url, product).pipe(map(obj => obj), catchError(e => this.errorHandler(e)));\n    }\n\n    delete(id) {\n      const url = `${this.baseUrl}/${id}`;\n      return this.http.delete(url).pipe(map(obj => obj), catchError(e => this.errorHandler(e)));\n    }\n\n    errorHandler(e) {\n      this.showMessage(\"Ocorreu um erro!\", true);\n      return EMPTY;\n    }\n\n  }\n\n  ProductService.ɵfac = function ProductService_Factory(t) {\n    return new (t || ProductService)(i0.ɵɵinject(i1.MatSnackBar), i0.ɵɵinject(i2.HttpClient));\n  };\n\n  ProductService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProductService,\n    factory: ProductService.ɵfac,\n    providedIn: \"root\"\n  });\n  return ProductService;\n})();","map":null,"metadata":{},"sourceType":"module"}